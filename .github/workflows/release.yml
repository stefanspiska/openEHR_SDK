name: release

on:
  workflow_dispatch:
    inputs:
      version:
        description: version
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Calculate realise version
        run: echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token:  ${{ secrets.PERSONAL_ACCESS_TOKEN }}


      - name: Create Release Branch
        run: |
          git config --global user.email "bot@ehrbase.org"
          git config --global user.name "bot"
          git checkout -b release/v${VERSION}
          mvn versions:set -DnewVersion=${VERSION} -DprocessAllModules=true
          replace="s/\[unreleased\]/${VERSION}/"
          sed -i ${replace} CHANGELOG.md
          git add -A
          git commit -m "release ${VERSION}: updated version to ${VERSION}"
          git push -u origin release/v${VERSION}     

      - name: Wait for ci pipeline
        run: |
          STATUS="pending"
          COMMIT=$(git rev-parse HEAD)
          echo "$COMMIT"
          WAITED="0"
          SLEEP_TIME= "60"
          while [ "$STATUS" == "pending" ] && ["$WAITED" -lq 600]
          do
           STATUS=$(gh api /repos/stefanspiska/openEHR_SDK/commits/"${COMMIT}"/status -q .state)
          echo "$STATUS"
          sleep ${SLEEP_TIME}
          WAITED=$(( ${WAITED} + 60))
          echo &WAITED
          done
          echo "$STATUS"
          if [ "$STATUS" != "success" ]
           then exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Merge into Main
        run: |
          git checkout master
          git pull
          git merge --no-ff release/v${VERSION}
          git push

      - name: Merge into dev
        run: |
          ARRAY_VERSION=( ${VERSION//./ } )
          git checkout  release/v${VERSION}
          NEXT_VERSION= ${ARRAY_VERSION[0]}.$(( ${ARRAY_VERSION[1]}+1)).0-SNAPSHOT
          echo $NEXT_VERSION
          mvn versions:set -DnewVersion=${NEXT_VERSION} -DprocessAllModules=true
          sed -i '5i ## [unreleased]\n ### Added \n ### Fixed \n' CHANGELOG.md
          git commit -m " updated version to ${NEXT_VERSION}"
          git checkout develop
          git pull
          git merge --no-ff release/v${VERSION}
          git push


